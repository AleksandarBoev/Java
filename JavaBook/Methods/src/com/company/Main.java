package com.company;

public class Main {

    public static void main(String[] args) {
//        Добри практики при работа с методи:
//        1. Ако един метод е станал много дълъг, потърси начин да разделиш кода на няколко отделни метода. После комбинирай
//                методите в главния метод.
//        2. Името на метода трябва да следва правилата на т.н. "Lower Camel Case" (т.е. започва с малка буква и всяка следваща дума
//        започва с главна буква).
//        3. Името на метода е хубаво да бъде съставено само от глагол или глагол и съществително, които да описват неговото действие накратко.
//        4. Имена на параметрите да са съществителни или съществителни + прилагателно.
//        5. Дефинирането на обект от тип Scanner в един метод не е препоръчително, защото могат да възникнат неприятни проблеми.
//                Начин за оправянето на такъв проблем е да се дефинира в main методът, в новия метод да се направи един входен параметър
//                от тип Scanner и да се подаде името на обекта от тип Scanner, дефиниран в main, като параметър. Виж задачата "Notifications"

//        Интересни детайли при методите:
//        1. Като входен параметър (аргумент) на метод може да се подаде друг метод, стига стойността, която връща да съвпада с тази, която се
//                изисква от входния параметър.
//        2. Варианти на методи (a.k.a. overloaded versions) са методи, които имат едни и същи имена и се различават по броя на параметри или
//                по типовете на данни на параметрите или и двете. Връщаната стойност на метода не играе роля при различаване на методите.
                //Извод: методите се различават по имена и параметри. Имената и параметрите образуват техните "сигнатури".
//        3. Само един "return" може да бъде изпълнен в тялото на метода. Кодът след "return" се пренебрегва. Може да има
//                няколко "return"-а например при (if else) проверки.
//        4. "public" и "static" в един метод се наричат модификатори. Първият (чийто противоположен модификатор е "private") е модификатор за достъп. Рано
//                ми е да работя с достъп до метод. Вторият "static" е (copy-pasted от учебника): Това означава, че този метод може да бъде
//        извикан от кой да е друг метод, независимо дали другият метод е статичен
//        или не.
//        Извод: първият модификатор може да се пропуска засега, но вторият "static" е задължителен.
//        5. Има разлика между подаване на аргументи от примитивен и от референтен тип. И двете стойности на аргументите се КОПИРАТ и се работи с
//                техните копия. След изпълнението на метода техните стойности остават същите. Разликата между двата типа данни е:
//                Стойността на референтната променлива всъщност е адрес в паметта, който адрес сочи към обект с някакви данни.
//                Методът копира стойността на референтната променлива (адресът) в нова променлива и тъй като и двете сочат към една и съща
//                част от паметта обектът може да бъде променен.
//                Стойността на примитивната променлива също се копира и се работи с нея, но промените не засягат подадената променлива.

        //Странични бележки: Тяло на метод = блок на метод.
        //Параметри (формални параметри) и аргументи (фактически параметри). Едните биват наричани така когато се говори за логиката
        //тялото на метода, а другите се наричат така, когато се изпълнява метода и му бъдат подадени стойности, с които да работи
        //(които стойности може да са във вид на променливи, стойности и т.н.)
        //
	// write your code here
    }
}
